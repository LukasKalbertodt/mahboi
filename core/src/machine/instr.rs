//! Instruction data.
//!
//! This module contains some basic information like size and cycle count for
//! all instructions. It is stored in two 256-element long arrays -- one for
//! the main instructions and one for all PREFIX CB instructions.

/// The information we store per instruction.
#[derive(Debug, Clone, Copy)]
pub struct Instr {
    /// Full mnemonic.
    ///
    /// This includes the arguments with several placeholders for values:
    /// - `d8`: immediate 8 bit data
    /// - `d16`: immediate 16 bit data
    /// - `a8`: 8 bit unsigned value that is added to `$FF00`
    /// - `a16`: 16 bit address
    /// - `r8`: 8 bit signed value which is added to PC
    pub mnemonic: &'static str,

    /// Length in bytes
    pub len: u8,

    /// CPU cylces
    pub cycles: u8,

    /// CPU cylces, if branch is taken.
    ///
    /// This is only set for instructions that have to decide something and
    /// only sometimes perform an operation (conditional jumps, mostly). If the
    /// branch/action is not taken, `cycles` is the correct value.
    pub cycles_taken: Option<u8>,
}

impl Instr {
    const fn new(
        mnemonic: &'static str,
        len: u8,
        cycles: u8,
        cycles_taken: Option<u8>,
    ) -> Option<Self> {
        Some(Instr {
            mnemonic,
            len,
            cycles,
            cycles_taken,
        })
    }
}

/// Placeholder for not yet implemented instructions. This way we can
/// deliberately differentiate between opcodes that are invalid (`None`) and
/// instructions we haven't added yet (`missing()`).
const fn missing() -> Option<Instr> {
    None
}

/// Main instruction data.
///
/// Entries with the value `None` are either not yet added to the list
/// (`missing`) or are invalid opcodes.
///
/// Regarding the special CB PREFIX instructions: in this array it has a len
/// and cycle number of 0. In the cheat sheet, those values are stated as 1 and
/// 4 respectively. This is wrong in a sense: the length/cycle values for all
/// CB-instructions in `PREFIXED_INSTRUCTIONS` already contains the total
/// value. The actual prefix doesn't add anything.
pub const INSTRUCTIONS: [Option<Instr>; 256] = [
    /* 00 */ Instr::new("NOP",          1,  4,  None),
    /* 01 */ Instr::new("LD BC, d16",   1,  4,  None),
    /* 02 */ Instr::new("LD (BC), A",   1,  4,  None),
    /* 03 */ Instr::new("INC BC",       1,  8,  None),
    /* 04 */ Instr::new("INC B",        1,  4,  None),
    /* 05 */ Instr::new("DEC B",        1,  4,  None),
    /* 06 */ Instr::new("LD B, d8",     2,  8,  None),
    /* 07 */ Instr::new("RLCA",         1,  4,  None),
    /* 08 */ Instr::new("LD (a16), SP", 3,  20, None),
    /* 09 */ Instr::new("ADD HL, BC",   1,  8,  None),
    /* 0a */ Instr::new("LD A, (BC)",   1,  8,  None),
    /* 0b */ Instr::new("DEC BC",       1,  8,  None),
    /* 0c */ Instr::new("INC C",        1,  4,  None),
    /* 0d */ Instr::new("DEC C",        1,  4,  None),
    /* 0e */ Instr::new("LD C, d8",     2,  8,  None),
    /* 0f */ Instr::new("RRCA",         1,  4,  None),

    /* 10 */ Instr::new("STOP 0",       2,  4,  None),
    /* 11 */ Instr::new("LD DE, d16",   3,  1,  None),
    /* 12 */ Instr::new("LD (DE), A",   1,  8,  None),
    /* 13 */ Instr::new("INC DE",       1,  8,  None),
    /* 14 */ Instr::new("INC D",        1,  4,  None),
    /* 15 */ Instr::new("DEC D",        1,  4,  None),
    /* 16 */ Instr::new("LD D, d8",     2,  8,  None),
    /* 17 */ Instr::new("RLA",          1,  4,  None),
    /* 18 */ Instr::new("JR r8",        2,  1,  None),
    /* 19 */ Instr::new("ADD HL, DE",   1,  8,  None),
    /* 1a */ Instr::new("LD A, (DE)",   1,  8,  None),
    /* 1b */ Instr::new("DEC DE",       1,  8,  None),
    /* 1c */ Instr::new("INC E",        1,  4,  None),
    /* 1d */ Instr::new("DEC E",        1,  4,  None),
    /* 1e */ Instr::new("LD E, d8",     2,  8,  None),
    /* 1f */ Instr::new("RRA",          1,  4,  None),

    /* 20 */ Instr::new("JR NZ, r8",    2,  8,  Some(12)),
    /* 21 */ Instr::new("LD HL, d16",   3,  12, None),
    /* 22 */ Instr::new("LD (HL+), A",  1,  8,  None),
    /* 23 */ Instr::new("INC HL",       1,  8,  None),
    /* 24 */ Instr::new("INC H",        1,  4,  None),
    /* 25 */ Instr::new("DEC H",        1,  4,  None),
    /* 26 */ Instr::new("LD H, d8",     2,  8,  None),
    /* 27 */ Instr::new("DAA",          1,  4,  None),
    /* 28 */ Instr::new("JR Z, r8",     2,  8,  Some(12)),
    /* 29 */ Instr::new("ADD HL, HL",   1,  8,  None),
    /* 2a */ Instr::new("LD A, (HL+)",  1,  8,  None),
    /* 2b */ Instr::new("DEC HL",       1,  8,  None),
    /* 2c */ Instr::new("INC L",        1,  4,  None),
    /* 2d */ Instr::new("DEC L",        1,  4,  None),
    /* 2e */ Instr::new("LD L, d8",     2,  8,  None),
    /* 2f */ Instr::new("CPL",          1,  4,  None),

    /* 30 */ Instr::new("JR NC, r8",    2,  8,  Some(12)),
    /* 31 */ Instr::new("LD SP, d16",   3,  12, None),
    /* 32 */ Instr::new("LD (HL-), A",  1,  8,  None),
    /* 33 */ Instr::new("INC SP",       1,  8,  None),
    /* 34 */ Instr::new("INC (HL)",     1,  12, None),
    /* 35 */ Instr::new("DEC (HL)",     1,  12, None),
    /* 36 */ Instr::new("LD (HL), d8",  2,  12, None),
    /* 37 */ Instr::new("SCF",          1,  4,  None),
    /* 38 */ Instr::new("JR C, r8",     2,  8,  Some(12)),
    /* 39 */ Instr::new("ADD HL, SP",   1,  8,  None),
    /* 3a */ Instr::new("LD A, (HL-)",  1,  8,  None),
    /* 3b */ Instr::new("DEC SP",       1,  8,  None),
    /* 3c */ Instr::new("INC A",        1,  4,  None),
    /* 3d */ Instr::new("DEC A",        1,  4,  None),
    /* 3e */ Instr::new("LD A, d8",     2,  8,  None),
    /* 3f */ Instr::new("CCF",          1,  4,  None),

    /* 40 */ Instr::new("LD B, B",      1,  4,  None),
    /* 41 */ Instr::new("LD B, C",      1,  4,  None),
    /* 42 */ Instr::new("LD B, D",      1,  4,  None),
    /* 43 */ Instr::new("LD B, E",      1,  4,  None),
    /* 44 */ Instr::new("LD B, H",      1,  4,  None),
    /* 45 */ Instr::new("LD B, L",      1,  4,  None),
    /* 46 */ Instr::new("LD B, (HL)",   1,  8,  None),
    /* 47 */ Instr::new("LD B, A",      1,  4,  None),
    /* 48 */ Instr::new("LD C, B",      1,  4,  None),
    /* 49 */ Instr::new("LD C, C",      1,  4,  None),
    /* 4a */ Instr::new("LD C, D",      1,  4,  None),
    /* 4b */ Instr::new("LD C, E",      1,  4,  None),
    /* 4c */ Instr::new("LD C, H",      1,  4,  None),
    /* 4d */ Instr::new("LD C, L",      1,  4,  None),
    /* 4e */ Instr::new("LD C, (HL)",   1,  8,  None),
    /* 4f */ Instr::new("LD C, A",      1,  4,  None),

    /* 50 */ Instr::new("LD D, B",      1,  4,  None),
    /* 51 */ Instr::new("LD D, C",      1,  4,  None),
    /* 52 */ Instr::new("LD D, D",      1,  4,  None),
    /* 53 */ Instr::new("LD D, E",      1,  4,  None),
    /* 54 */ Instr::new("LD D, H",      1,  4,  None),
    /* 55 */ Instr::new("LD D, L",      1,  4,  None),
    /* 56 */ Instr::new("LD D, (HL)",   1,  8,  None),
    /* 57 */ Instr::new("LD D, A",      1,  4,  None),
    /* 58 */ Instr::new("LD E, B",      1,  4,  None),
    /* 59 */ Instr::new("LD E, C",      1,  4,  None),
    /* 5a */ Instr::new("LD E, D",      1,  4,  None),
    /* 5b */ Instr::new("LD E, E",      1,  4,  None),
    /* 5c */ Instr::new("LD E, H",      1,  4,  None),
    /* 5d */ Instr::new("LD E, L",      1,  4,  None),
    /* 5e */ Instr::new("LD E, (HL)",   1,  8,  None),
    /* 5f */ Instr::new("LD E, A",      1,  4,  None),

    /* 60 */ Instr::new("LD H, B",      1,  4,  None),
    /* 61 */ Instr::new("LD H, C",      1,  4,  None),
    /* 62 */ Instr::new("LD H, D",      1,  4,  None),
    /* 63 */ Instr::new("LD H, E",      1,  4,  None),
    /* 64 */ Instr::new("LD H, H",      1,  4,  None),
    /* 65 */ Instr::new("LD H, L",      1,  4,  None),
    /* 66 */ Instr::new("LD H, (HL)",   1,  8,  None),
    /* 67 */ Instr::new("LD H, A",      1,  4,  None),
    /* 68 */ Instr::new("LD L, B",      1,  4,  None),
    /* 69 */ Instr::new("LD L, C",      1,  4,  None),
    /* 6a */ Instr::new("LD L, D",      1,  4,  None),
    /* 6b */ Instr::new("LD L, E",      1,  4,  None),
    /* 6c */ Instr::new("LD L, H",      1,  4,  None),
    /* 6d */ Instr::new("LD L, L",      1,  4,  None),
    /* 6e */ Instr::new("LD L, (HL)",   1,  8,  None),
    /* 6f */ Instr::new("LD L, A",      1,  4,  None),

    /* 70 */ Instr::new("LD (HL), B",   1,  8,  None),
    /* 71 */ Instr::new("LD (HL), C",   1,  8,  None),
    /* 72 */ Instr::new("LD (HL), D",   1,  8,  None),
    /* 73 */ Instr::new("LD (HL), E",   1,  8,  None),
    /* 74 */ Instr::new("LD (HL), H",   1,  8,  None),
    /* 75 */ Instr::new("LD (HL), L",   1,  8,  None),
    /* 76 */ Instr::new("HALT",         1,  4,  None),
    /* 77 */ Instr::new("LD (HL), A",   1,  8,  None),
    /* 78 */ Instr::new("LD A, B",      1,  4,  None),
    /* 79 */ Instr::new("LD A, C",      1,  4,  None),
    /* 7a */ Instr::new("LD A, D",      1,  4,  None),
    /* 7b */ Instr::new("LD A, E",      1,  4,  None),
    /* 7c */ Instr::new("LD A, H",      1,  4,  None),
    /* 7d */ Instr::new("LD A, L",      1,  4,  None),
    /* 7e */ Instr::new("LD A, (HL)",   1,  8,  None),
    /* 7f */ Instr::new("LD A, A",      1,  4,  None),

    /* 80 */ Instr::new("ADD A, B",     1,  4,  None),
    /* 81 */ Instr::new("ADD A, C",     1,  4,  None),
    /* 82 */ Instr::new("ADD A, D",     1,  4,  None),
    /* 83 */ Instr::new("ADD A, E",     1,  4,  None),
    /* 84 */ Instr::new("ADD A, H",     1,  4,  None),
    /* 85 */ Instr::new("ADD A, L",     1,  4,  None),
    /* 86 */ Instr::new("ADD A, (HL)",  1,  8,  None),
    /* 87 */ Instr::new("ADD A, A",     1,  4,  None),
    /* 88 */ Instr::new("ADC A, B",     1,  4,  None),
    /* 89 */ Instr::new("ADC A, C",     1,  4,  None),
    /* 8a */ Instr::new("ADC A, D",     1,  4,  None),
    /* 8b */ Instr::new("ADC A, E",     1,  4,  None),
    /* 8c */ Instr::new("ADC A, H",     1,  4,  None),
    /* 8d */ Instr::new("ADC A, L",     1,  4,  None),
    /* 8e */ Instr::new("ADC A, (HL)",  1,  8,  None),
    /* 8f */ Instr::new("ADC A, A",     1,  4,  None),

    /* 90 */ Instr::new("SUB B",        1,  4,  None),
    /* 91 */ Instr::new("SUB C",        1,  4,  None),
    /* 92 */ Instr::new("SUB D",        1,  4,  None),
    /* 93 */ Instr::new("SUB E",        1,  4,  None),
    /* 94 */ Instr::new("SUB H",        1,  4,  None),
    /* 95 */ Instr::new("SUB L",        1,  4,  None),
    /* 96 */ Instr::new("SUB (HL)",     1,  8,  None),
    /* 97 */ Instr::new("SUB A",        1,  4,  None),
    /* 98 */ Instr::new("SBC A, B",     1,  4,  None),
    /* 99 */ Instr::new("SBC A, C",     1,  4,  None),
    /* 9a */ Instr::new("SBC A, D",     1,  4,  None),
    /* 9b */ Instr::new("SBC A, E",     1,  4,  None),
    /* 9c */ Instr::new("SBC A, H",     1,  4,  None),
    /* 9d */ Instr::new("SBC A, L",     1,  4,  None),
    /* 9e */ Instr::new("SBC A, (HL)",  1,  8,  None),
    /* 9f */ Instr::new("SBC A, A",     1,  4,  None),

    /* a0 */ Instr::new("AND B",        1,  4,  None),
    /* a1 */ Instr::new("AND C",        1,  4,  None),
    /* a2 */ Instr::new("AND D",        1,  4,  None),
    /* a3 */ Instr::new("AND E",        1,  4,  None),
    /* a4 */ Instr::new("AND H",        1,  4,  None),
    /* a5 */ Instr::new("AND L",        1,  4,  None),
    /* a6 */ Instr::new("AND (HL)",     1,  8,  None),
    /* a7 */ Instr::new("AND A",        1,  4,  None),
    /* a8 */ Instr::new("XOR B",        1,  4,  None),
    /* a9 */ Instr::new("XOR C",        1,  4,  None),
    /* aa */ Instr::new("XOR D",        1,  4,  None),
    /* ab */ Instr::new("XOR E",        1,  4,  None),
    /* ac */ Instr::new("XOR H",        1,  4,  None),
    /* ad */ Instr::new("XOR L",        1,  4,  None),
    /* ae */ Instr::new("XOR (HL)",     1,  8,  None),
    /* af */ Instr::new("XOR A",        1,  4,  None),

    /* b0 */ Instr::new("OR B",         1,  4,  None),
    /* b1 */ Instr::new("OR C",         1,  4,  None),
    /* b2 */ Instr::new("OR D",         1,  4,  None),
    /* b3 */ Instr::new("OR E",         1,  4,  None),
    /* b4 */ Instr::new("OR H",         1,  4,  None),
    /* b5 */ Instr::new("OR L",         1,  4,  None),
    /* b6 */ Instr::new("OR (HL)",      1,  8,  None),
    /* b7 */ Instr::new("OR A",         1,  4,  None),
    /* b8 */ Instr::new("CP B",         1,  4,  None),
    /* b9 */ Instr::new("CP C",         1,  4,  None),
    /* ba */ Instr::new("CP D",         1,  4,  None),
    /* bb */ Instr::new("CP E",         1,  4,  None),
    /* bc */ Instr::new("CP H",         1,  4,  None),
    /* bd */ Instr::new("CP L",         1,  4,  None),
    /* be */ Instr::new("CP (HL)",      1,  8,  None),
    /* bf */ Instr::new("CP A",         1,  4,  None),

    /* 00 */ Instr::new("RET NZ",       1,  8,  Some(20)),
    /* 01 */ Instr::new("POP BC",       1,  12, None),
    /* 02 */ Instr::new("JP NZ, a16",   3,  12, Some(16)),
    /* 03 */ Instr::new("JP a16",       3,  16, None),
    /* 04 */ Instr::new("CALL NZ, a16", 3,  12, Some(24)),
    /* 05 */ Instr::new("PUSH BC",      1,  16, None),
    /* 06 */ Instr::new("ADD A, d8",    2,  8,  None),
    /* 07 */ Instr::new("RST 00H",      1,  16, None),
    /* 08 */ Instr::new("RET Z",        1,  8,  Some(20)),
    /* 09 */ Instr::new("RET",          1,  16, None),
    /* 0a */ Instr::new("JP Z, a16",    3,  12, Some(16)),
    /* 0b */ Instr::new("PREFIX CB",    0,  0,  None),
    /* 0c */ Instr::new("CALL Z, a16",  3,  12, Some(24)),
    /* 0d */ Instr::new("CALL a16",     3,  24, None),
    /* 0e */ Instr::new("ADC A, d8",    2,  8,  None),
    /* 0f */ Instr::new("RST 08H",      1,  16, None),

    /* d0 */ Instr::new("RET NC",       1,  8,  Some(20)),
    /* d1 */ Instr::new("POP DE",       1,  12, None),
    /* d2 */ Instr::new("JP NC, a16",   3,  12, Some(16)),
    /* d3 */ None,
    /* d4 */ Instr::new("CALL NC, a16", 3,  12, Some(24)),
    /* d5 */ Instr::new("PUSH DE",      1,  16, None),
    /* d6 */ Instr::new("SUB d8",       2,  8,  None),
    /* d7 */ Instr::new("RST 10H",      1,  16, None),
    /* d8 */ Instr::new("RET C",        1,  8,  Some(20)),
    /* d9 */ Instr::new("RETI",         1,  16, None),
    /* da */ Instr::new("JP C, a16",    3,  12, Some(16)),
    /* db */ None,
    /* dc */ Instr::new("CALL C, a16",  3,  12, Some(24)),
    /* dd */ None,
    /* de */ Instr::new("SBC A, d8",    2,  8,  None),
    /* df */ Instr::new("RST 18H",      1,  16, None),

    /* e0 */ Instr::new("LDH (a8), A",  2,  12, None),
    /* e1 */ Instr::new("POP HL",       1,  12, None),
    /* e2 */ Instr::new("LD (C), A",    2,  8,  None),
    /* e3 */ None,
    /* e4 */ None,
    /* e5 */ Instr::new("PUSH HL",      1,  16, None),
    /* e6 */ Instr::new("AND d8",       2,  8,  None),
    /* e7 */ Instr::new("RST 20H",      1,  16, None),
    /* e8 */ Instr::new("ADD SP, r8",   2,  16, None),
    /* e9 */ Instr::new("JP (HL)",      1,  4,  None),
    /* ea */ Instr::new("LD (a16), A",  3,  16, None),
    /* eb */ None,
    /* ec */ None,
    /* ed */ None,
    /* ee */ Instr::new("XOR d8",       2,  8,  None),
    /* ef */ Instr::new("RST 28H",      1,  16, None),

    /* f0 */ Instr::new("LDH A, (a8)",  2,  12, None),
    /* f1 */ Instr::new("POP AF",       1,  12, None),
    /* f2 */ Instr::new("LD A, (C)",    2,  8,  None),
    /* f3 */ Instr::new("DI",           1,  4,  None),
    /* f4 */ None,
    /* f5 */ Instr::new("PUSH AF",      1,  16, None),
    /* f6 */ Instr::new("OR d8",        2,  8,  None),
    /* f7 */ Instr::new("RST 30H",      1,  16, None),
    /* f8 */ Instr::new("LD HL, SP+r8", 2,  12, None),
    /* f9 */ Instr::new("LD SP, HL",    1,  8,  None),
    /* fa */ Instr::new("LD A, (a16)",  3,  16, None),
    /* fb */ Instr::new("EI",           1,  4,  None),
    /* fc */ None,
    /* fd */ None,
    /* fe */ Instr::new("CP d8",        2,  8,  None),
    /* ff */ Instr::new("RST 38H",      1,  16, None),
];

/// Instructions prefixed by CB opcode. (These opcodes are 2 bytes long.)
pub const PREFIXED_INSTRUCTIONS: [Option<Instr>; 256] = [
    /* 00 */ missing(),
    /* 01 */ missing(),
    /* 02 */ missing(),
    /* 03 */ missing(),
    /* 04 */ missing(),
    /* 05 */ missing(),
    /* 06 */ missing(),
    /* 07 */ missing(),
    /* 08 */ missing(),
    /* 09 */ missing(),
    /* 0a */ missing(),
    /* 0b */ missing(),
    /* 0c */ missing(),
    /* 0d */ missing(),
    /* 0e */ missing(),
    /* 0f */ missing(),

    /* 10 */ missing(),
    /* 11 */ missing(),
    /* 12 */ missing(),
    /* 13 */ missing(),
    /* 14 */ missing(),
    /* 15 */ missing(),
    /* 16 */ missing(),
    /* 17 */ missing(),
    /* 18 */ missing(),
    /* 19 */ missing(),
    /* 1a */ missing(),
    /* 1b */ missing(),
    /* 1c */ missing(),
    /* 1d */ missing(),
    /* 1e */ missing(),
    /* 1f */ missing(),

    /* 20 */ missing(),
    /* 21 */ missing(),
    /* 22 */ missing(),
    /* 23 */ missing(),
    /* 24 */ missing(),
    /* 25 */ missing(),
    /* 26 */ missing(),
    /* 27 */ missing(),
    /* 28 */ missing(),
    /* 29 */ missing(),
    /* 2a */ missing(),
    /* 2b */ missing(),
    /* 2c */ missing(),
    /* 2d */ missing(),
    /* 2e */ missing(),
    /* 2f */ missing(),

    /* 30 */ missing(),
    /* 31 */ missing(),
    /* 32 */ missing(),
    /* 33 */ missing(),
    /* 34 */ missing(),
    /* 35 */ missing(),
    /* 36 */ missing(),
    /* 37 */ missing(),
    /* 38 */ missing(),
    /* 39 */ missing(),
    /* 3a */ missing(),
    /* 3b */ missing(),
    /* 3c */ missing(),
    /* 3d */ missing(),
    /* 3e */ missing(),
    /* 3f */ missing(),

    /* 40 */ missing(),
    /* 41 */ missing(),
    /* 42 */ missing(),
    /* 43 */ missing(),
    /* 44 */ missing(),
    /* 45 */ missing(),
    /* 46 */ missing(),
    /* 47 */ missing(),
    /* 48 */ missing(),
    /* 49 */ missing(),
    /* 4a */ missing(),
    /* 4b */ missing(),
    /* 4c */ missing(),
    /* 4d */ missing(),
    /* 4e */ missing(),
    /* 4f */ missing(),

    /* 50 */ missing(),
    /* 51 */ missing(),
    /* 52 */ missing(),
    /* 53 */ missing(),
    /* 54 */ missing(),
    /* 55 */ missing(),
    /* 56 */ missing(),
    /* 57 */ missing(),
    /* 58 */ missing(),
    /* 59 */ missing(),
    /* 5a */ missing(),
    /* 5b */ missing(),
    /* 5c */ missing(),
    /* 5d */ missing(),
    /* 5e */ missing(),
    /* 5f */ missing(),

    /* 60 */ missing(),
    /* 61 */ missing(),
    /* 62 */ missing(),
    /* 63 */ missing(),
    /* 64 */ missing(),
    /* 65 */ missing(),
    /* 66 */ missing(),
    /* 67 */ missing(),
    /* 68 */ missing(),
    /* 69 */ missing(),
    /* 6a */ missing(),
    /* 6b */ missing(),
    /* 6c */ missing(),
    /* 6d */ missing(),
    /* 6e */ missing(),
    /* 6f */ missing(),

    /* 70 */ missing(),
    /* 71 */ missing(),
    /* 72 */ missing(),
    /* 73 */ missing(),
    /* 74 */ missing(),
    /* 75 */ missing(),
    /* 76 */ missing(),
    /* 77 */ missing(),
    /* 78 */ missing(),
    /* 79 */ missing(),
    /* 7a */ missing(),
    /* 7b */ missing(),
    /* 7c */ Instr::new("BIT 7, H",  2,  8, None),
    /* 7d */ missing(),
    /* 7e */ missing(),
    /* 7f */ missing(),

    /* 80 */ missing(),
    /* 81 */ missing(),
    /* 82 */ missing(),
    /* 83 */ missing(),
    /* 84 */ missing(),
    /* 85 */ missing(),
    /* 86 */ missing(),
    /* 87 */ missing(),
    /* 88 */ missing(),
    /* 89 */ missing(),
    /* 8a */ missing(),
    /* 8b */ missing(),
    /* 8c */ missing(),
    /* 8d */ missing(),
    /* 8e */ missing(),
    /* 8f */ missing(),

    /* 90 */ missing(),
    /* 91 */ missing(),
    /* 92 */ missing(),
    /* 93 */ missing(),
    /* 94 */ missing(),
    /* 95 */ missing(),
    /* 96 */ missing(),
    /* 97 */ missing(),
    /* 98 */ missing(),
    /* 99 */ missing(),
    /* 9a */ missing(),
    /* 9b */ missing(),
    /* 9c */ missing(),
    /* 9d */ missing(),
    /* 9e */ missing(),
    /* 9f */ missing(),

    /* a0 */ missing(),
    /* a1 */ missing(),
    /* a2 */ missing(),
    /* a3 */ missing(),
    /* a4 */ missing(),
    /* a5 */ missing(),
    /* a6 */ missing(),
    /* a7 */ missing(),
    /* a8 */ missing(),
    /* a9 */ missing(),
    /* aa */ missing(),
    /* ab */ missing(),
    /* ac */ missing(),
    /* ad */ missing(),
    /* ae */ missing(),
    /* af */ missing(),

    /* b0 */ missing(),
    /* b1 */ missing(),
    /* b2 */ missing(),
    /* b3 */ missing(),
    /* b4 */ missing(),
    /* b5 */ missing(),
    /* b6 */ missing(),
    /* b7 */ missing(),
    /* b8 */ missing(),
    /* b9 */ missing(),
    /* ba */ missing(),
    /* bb */ missing(),
    /* bc */ missing(),
    /* bd */ missing(),
    /* be */ missing(),
    /* bf */ missing(),

    /* 00 */ missing(),
    /* 01 */ missing(),
    /* 02 */ missing(),
    /* 03 */ missing(),
    /* 04 */ missing(),
    /* 05 */ missing(),
    /* 06 */ missing(),
    /* 07 */ missing(),
    /* 08 */ missing(),
    /* 09 */ missing(),
    /* 0a */ missing(),
    /* 0b */ missing(),
    /* 0c */ missing(),
    /* 0d */ missing(),
    /* 0e */ missing(),
    /* 0f */ missing(),

    /* d0 */ missing(),
    /* d1 */ missing(),
    /* d2 */ missing(),
    /* d3 */ missing(),
    /* d4 */ missing(),
    /* d5 */ missing(),
    /* d6 */ missing(),
    /* d7 */ missing(),
    /* d8 */ missing(),
    /* d9 */ missing(),
    /* da */ missing(),
    /* db */ missing(),
    /* dc */ missing(),
    /* dd */ missing(),
    /* de */ missing(),
    /* df */ missing(),

    /* e0 */ missing(),
    /* e1 */ missing(),
    /* e2 */ missing(),
    /* e3 */ missing(),
    /* e4 */ missing(),
    /* e5 */ missing(),
    /* e6 */ missing(),
    /* e7 */ missing(),
    /* e8 */ missing(),
    /* e9 */ missing(),
    /* ea */ missing(),
    /* eb */ missing(),
    /* ec */ missing(),
    /* ed */ missing(),
    /* ee */ missing(),
    /* ef */ missing(),

    /* f0 */ missing(),
    /* f1 */ missing(),
    /* f2 */ missing(),
    /* f3 */ missing(),
    /* f4 */ missing(),
    /* f5 */ missing(),
    /* f6 */ missing(),
    /* f7 */ missing(),
    /* f8 */ missing(),
    /* f9 */ missing(),
    /* fa */ missing(),
    /* fb */ missing(),
    /* fc */ missing(),
    /* fd */ missing(),
    /* fe */ missing(),
    /* ff */ missing(),
];
